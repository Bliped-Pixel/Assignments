#  Task 2
-- query 1 to retrieve the names and email of all customers
select id,first_name,last_name, email from customers;
-- query 2 to list all orders with their order dates and corresponding customer names
select o.id,c.first_name,c.last_name,o.order_date
from orders o, customers c
where c.id = o.customers_id;
-- query 3 to insert a new customer record into the customers table, Incluse customer information such as name,email and address
insert into customers (first_name,last_name,email)
values ('Muntasir','M','muntasirthameem@gmail.com');
-- query 4 to update the prices of all the electronics gadgets in the "Products" table by increasing them by 10%
update products set price = price+(price*0.1) where id > 0;
-- query 5 to delete a specific order and its associated order details from the orders and order_details 
-- tables allow users to inputs the order ID as a parameter
delete o, od
from orders o join order_details od on o.id = od.orders_id
where o.id = 15; 
/* error - Cannot delete or update a parent row: a foreign key constraint fails (`TechShop`.`order_details`, 
CONSTRAINT `fk_order_details_orders1` FOREIGN KEY (`orders_id`) REFERENCES `orders` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION)

My guess is that when i try to execute the above query it likely deletes from the "orders" table which the "order_details" table doesn't
like since the "order_detials" table has a reference from "orders" table

And hence I went with creating two different queries which executes in the order which the sql likes 

when I looked it up in the internet I got this query 
set foreign_key_checks=0;
delete o, od
from orders o join order_details od on o.id = od.orders_id
where o.id = 14;
set foreign_key_checks=1;

But this again used 3 queries and I assumed this just ignores the warning by mysql and deletes it
*/
-- I went with this instead but this took me 2 separate queries
delete from order_details where orders_id = 1;
delete from orders where id = 1;

-- query 6 to inserta new order into the "orders" table. include the customerID order date, and etc
insert into orders (id, order_date,total_amount,customers_id)
values(1,'2024-03-01',2000,1);

-- query 7 to updat the contact information (eg. email and address) of a specific customer in 
-- "customers" table. Allow users to input the customers id and new contact informations
update customers set email = 'johndoe123@gmail.com',phone = '9876543210',address = '321 main st'
where id = 1;

-- query 8 Write an SQL query to recalculate and update the total cost of each order in the "Orders"
-- table based on the prices and quantities in the "OrderDetails" table
update orders 
set total_amount = (select (p.price*od.quantity)
					from products p join order_details od on od.products_id = p.id 
                    where od.orders_id = o.id );  

-- query 9 to delete all orders and their associated order details for a specific customer 
-- from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID as a parameter.

set foreign_key_checks=0;
delete o, od
from orders o join order_details od on o.id = od.orders_id join customer c on c.id = o.customers_id
where c.id = 15;
set foreign_key_checks=1;

-- query 10 to insert a new electronic gadget product into the "Products" table,
-- including product name, category, price, and any other relevant details.

insert into products (product_name,description,price) values ('switch','nintendos console',1500);

-- query 11 to update the status of a specific order in the "Orders" table (e.g., from
-- "Pending" to "Shipped"). Allow users to input the order ID and the new status.

# There is no status column in "orders" table so I just updated the date for something random

update orders set order_date = '2024-01-31' where id = 1;

-- query 12 to calculate and update the number of orders placed by each customer
-- in the "Customers" table based on the data in the "Orders" table.

/* Again there is no table called "number of orders" in customers table, hence I went along
retrived the numbmer of orders a customers has made */

select c.id,c.first_name,c.last_name,count(o.id) as number_of_orders 
from orders o join customers c on o.customers_id = c.id 
group by o.customers_id;


# Task 3 
-- query 13 to retrieve a list of all orders along with customer information (e.g.,
-- customer name) for each order.

select o.id , c.frist_name,c.last_name 
from customers c join orders o on c.id = o.customer_id;

-- query 14 query to find the total revenue generated by each electronic gadget product.
-- Include the product name and the total revenue

select  p.id, p.product_name, sum(o.total_amount) as total_revenue
from orders o join order_details od on o.id = od.orders_id join products p on p.id = od.products_id
group by od.products_id; 

-- query 15 to list all customers who have made at least one purchase. Include their
-- names and contact information. 

select c.first_name,c.last_name, c.phone, count(id) as number_of_purchases
from customer c join orders o on c.id = o.customers_id  
group by c.id;

-- query 16 to find the most popular electronic gadget, which is the one with the highest
-- total quantity ordered. Include the product name and the total quantity ordered.

select p.product_name, sum(od.quantity) as total_quantity
from products p join order_details od on od.products_id = p.id 
group by p.id
order by total_quantity desc
limit 1;

-- query 17 to retrieve a list of electronic gadgets along with their corresponding categories. 
/* Again there are no such thing as category table in the prodcut, instead I used prodcut description to group them*/
select p.description , count(p.id) as total_number_Prodcut
from products p
group by p.description;

-- query 18 Write an SQL query to calculate the average order value for each customer. Include the
-- customer's name and their average order value. 

select c.first_name,c.last_name,avg(o.total_amount) as average_order_value, count(o.customers_id) as number_of_purchases
from customers c join orders o on o.customers_id = c.id
group by o.customers_id;

-- query 19 to find the order with the highest total revenue. Include the order ID, customer information, 
-- and the total revenue

select o.id, c.first_name,c.last_name, o.total_amount as highest_total_revenue
from orders o join customers c on c.id = o.customers_id
order by o.total_amount desc
limit 1;

-- query 20 Write an SQL query to list electronic gadgets and the number of times each product has been ordered

select p.id,p.product_name, sum(od.quantity) as item_ordered
from products p join order_details od on od.products_id = p.id 
group by p.id
order by item_ordered desc;

-- query 21 to find customers who have purchased a specific electronic gadget product. Allow users to input
-- the product name as a parameter

select c.first_name,c.last_name
from customers c join orders o on c.id = o.customers_id join order_details od  on od.orders_id = o.id
join products p on od.products_id = p.id
where p.product_name = 'laptop';

-- query 22 Write an SQL query to calculate the total revenue generated by all orders placed within a
-- specific time period. Allow users to input the start and end dates as parameters.

select sum(o.total_amount) as total_revenue
from orders o
where o.order_date between '2024-03-01' and '2024-03-10';

# Task 4

 -- query 23 to find out which customers have not placed any orders
 
 select *
 from customers  
 where  id not in (select customers_id from orders);
 
 -- query 24 query to find the total number of products available for sale. 
 
 select sum(quantity_in_stock) as total_number_of_products
 from inventory;
 
 -- query 25 to calculate the total revenue generated by TechShop. 
 
select sum(o.total_amount) as total_revenue
from orders o;

-- query 26 to calculate the average quantity ordered for products in a specific category. Allow users 
-- to input the category name as a parameter
 
select description , avg(od.quantity) as total_number_Prodcut
from products p join order_details od on p.id = od.products_id
where p.description = 'smart devices';

-- query 27 to calculate the total revenue generated by a specific customer. Allow users
-- to input the customer ID as a parameter.

select c.first_name,c.last_name, sum(o.total_amount) as total_revenue
from customers c join orders o on c.id = o.customers_id
where c.id = 3;

--  query 28 to find the customers who have placed the most orders. List their names
-- and the number of orders they've placed.


select c.id,c.first_name,c.last_name, sum(od.quantity) as item_ordered
from customers c join orders o on o.customers_id = c.id join order_details od on od.orders_id = o.id 
group by o.customers_id
order by item_ordered desc
limit 1;

-- query 29 to find the most popular product category, which is the one with the highest
-- total quantity ordered across all orders.

select p.description, sum(od.quantity) as total_quantity
from products p join order_details od on od.products_id  = p.id
group by p.description 
order by total_quantity desc
limit 1;

-- query 30 to find the customer who has spent the most money (highest total revenue)
-- on electronic gadgets. List their name and total spending.
 select c.id, c.first_name,c.last_name, sum(o.total_amount) as highest_total_revenue 
 from customers c join orders o on o.customers_id = c.id 
 group by c.id 
 order by highest_total_revenue desc 
 limit 1;

-- query 31 to calculate the average order value (total revenue divided by the number of orders) for all customers.

select c.id,c.first_name,c.last_name, avg(o.total_amount) as average_order_value
from customers c join orders o on o.customers_id = c.id
group by o.customers_id;

-- query 32 to find the total number of orders placed by each customer and list their
-- names along with the order count.

select c.id, c.first_name,c.last_name,count(c.id) as order_count
from customers c join orders o on c.id = o.customers_id
group by c.id;

